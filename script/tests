#!/usr/bin/env ruby

# This script is a wrapper to run the specs in parallel.
# The following parameters determine which tests will be run
# by this worker.
#
# Parameters:
#
#     WORKER_ID             0, 1, 2, 3, 4, ...
#     NUMBER_OF_WORKERS     10
#     CI_CATEGORY           features, models, others

#
# Example workers:
#
#     CI_CATEGORY=features WORKER_ID=0 NUMBER_OF_WORKERS=10   bundle exec ruby script/tests
#     CI_CATEGORY=features WORKER_ID=1 NUMBER_OF_WORKERS=10   bundle exec ruby script/tests
#     CI_CATEGORY=features ...
#     CI_CATEGORY=models WORKER_ID=0 NUMBER_OF_WORKERS=10     bundle exec ruby script/tests
#     CI_CATEGORY=models WORKER_ID=1 NUMBER_OF_WORKERS=10     bundle exec ruby script/tests
#     CI_CATEGORY=models ...
#     CI_CATEGORY=others WORKER_ID=0 NUMBER_OF_WORKERS=1      bundle exec ruby script/tests

NUMBER_OF_RETRIES = 2

rspec_args = ARGV.to_a.join(" ")

json_list_of_specs = `bin/rspec --seed 1 --format json --out tmp/specs.json --dry-run #{rspec_args}`

require 'json'
data = JSON.parse(File.read("tmp/specs.json"))
examples = data['examples'].map do |example|
  "#{example['file_path']}:#{example['line_number']}"
end

feature_specs = examples.select { |example| example.include? "spec/features/" }
model_specs = examples.select { |example| example.include? "spec/models/" }
other_specs = examples - feature_specs - model_specs

category = ENV['CI_CATEGORY'] || 'all'

specs_to_run = if category == "features"
  feature_specs
elsif category == "models"
  model_specs
elsif category == "all"
  feature_specs + model_specs + other_specs
else
  other_specs
end

if specs_to_run.any?

  worker_id = (ENV['WORKER_ID'] || 0).to_i
  number_of_workers = (ENV['NUMBER_OF_WORKERS'] || 1).to_i
  number_of_specs_to_run_by_each_worker = (1.0 * specs_to_run.count / number_of_workers).ceil # rounds up

  specs_to_run_by_this_worker = specs_to_run.each_slice(number_of_specs_to_run_by_each_worker).to_a[worker_id]

  if specs_to_run_by_this_worker.nil? || specs_to_run_by_this_worker.none?
    print "After rounding conservatively, no specs are left for this worker.\n"
    exit 0
  end

  print "\n\n\nTHIS WORKER #{worker_id} OF #{number_of_workers} RUNS:\n"
  specs_to_run_by_this_worker.each { |spec| print "#{spec}\n" }
  print "\n\n\n"


  require 'colored'
  def shell(command)
    print "#{command}\n".white.bold

    output = ""
    r, io = IO.pipe
    fork do
      system(command, out: io, err: :out)
    end
    io.close
    r.each_char{|c| print c; output += c}

    return output
  end

  result = shell "bin/rspec #{specs_to_run_by_this_worker.join(' ')}"

  failed_specs = result.scan(/\nrspec .\/([^\s]*) # /).collect { |match| match[0] }

  if failed_specs.any?
    print "\nRerunning failed specs ...\n\n".blue

    finally_failing_specs = []
    failed_specs.each do |spec|
      number_of_retries = 0
      loop do
        number_of_retries += 1
        result = shell "bin/rspec #{spec}"
        number_of_failing_specs = result.scan(/example[s]?, ([0-9]*) failure[s]?/).last[0].to_i
        if number_of_failing_specs == 0
          break
        elsif number_of_retries > NUMBER_OF_RETRIES
          finally_failing_specs << spec
          break
        end
      end
    end

    print "\nFailing specs: #{finally_failing_specs.join(' ')}\n\n".red

    exit(finally_failing_specs.count)
  elsif result.include? " 0 failures"
    exit 0
  else
    print "\nSomething went wrong.\n\n".red
    exit 1
  end

else
  print "No specs to run for this worker.\n"
  exit 0
end

